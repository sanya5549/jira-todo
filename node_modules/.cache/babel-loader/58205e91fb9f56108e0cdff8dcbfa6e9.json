{"ast":null,"code":"import _toConsumableArray from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nimport { ADD_NEW_CARD, REMOVE_CARD, EDIT_CARD } from './config/constants';\nvar initialState = {\n  all: [],\n  todo: [],\n  inProgress: [],\n  done: []\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // if there is no action, return the initial state of the card //\n  if (state === null || state === undefined) return _objectSpread({}, initialState); // checking for the type of action chosen by the user. The user can perform three types of actions i.e add a //\n\n  switch (action.type) {\n    // add a new card, edit the previous card and delete the card//                \n    case ADD_NEW_CARD:\n      {\n        var card = action.payload;\n        var idx = state.all.findIndex(function (o) {\n          return o.id == card.id;\n        });\n\n        if (idx === -1) {\n          idx = state.inProgress.findIndex(function (o) {\n            return o.id === card.id;\n          });\n\n          if (idx === -1) {\n            idx = state.todo.findIndex(function (o) {\n              return o.id === card.id;\n            });\n\n            if (idx === -1) {\n              idx = state.done.findIndex(function (o) {\n                return o.id === card.id;\n              });\n\n              if (idx === -1) {\n                return _objectSpread({}, state);\n              }\n\n              state.done[idx] = _objectSpread({}, card);\n              return _objectSpread({}, state, {\n                done: [].concat(_toConsumableArray(state.done), [card])\n              });\n            }\n\n            state.todo[idx] = _objectSpread({}, card);\n            return _objectSpread({}, state, {\n              todo: [].concat(_toConsumableArray(state.todo), [card])\n            });\n          }\n\n          state.inProgress[idx] = _objectSpread({}, card);\n          return _objectSpread({}, state, {\n            inProgress: [].concat(_toConsumableArray(state.inProgress), [card])\n          });\n        }\n\n        state.all[idx] = _objectSpread({}, card);\n        return _objectSpread({}, state, {\n          all: [].concat(_toConsumableArray(state.all), [card])\n        });\n      }\n\n    /* remove the card present in either of the four columns and restore the rest of the cards*/\n\n    case REMOVE_CARD:\n      {\n        var id = action.payload;\n\n        var all = _.filter(state.all, function (o) {\n          return o.id !== id;\n        });\n\n        var todo = _.filter(state.todo, function (o) {\n          return o.id !== id;\n        });\n\n        var inProgress = _.filter(state.inProgress, function (o) {\n          return o.id !== id;\n        });\n\n        var done = _.filter(state.done, function (o) {\n          return o.id !== id;\n        });\n\n        console.log(id, all);\n        return {\n          all: all,\n          todo: todo,\n          inProgress: inProgress,\n          done: done\n        };\n      }\n\n    case EDIT_CARD:\n      {\n        var _card = action.payload;\n\n        var _idx = state.all.findIndex(function (o) {\n          return o.id === _card.id;\n        }); // if the card is not present in all check in next grid and so on//\n\n\n        if (_idx === -1) {\n          _idx = state.inProgress.findIndex(function (o) {\n            return o.id === _card.id;\n          }); //if the card is not present in inProgress\n\n          if (_idx === -1) {\n            _idx = state.todo.findIndex(function (o) {\n              return o.id === _card.id;\n            }); //if the card is not present in todo part\n\n            if (_idx === -1) {\n              _idx = state.done.findIndex(function (o) {\n                return o.id === _card.id;\n              }); //if the card is also not present in done part\n\n              if (_idx === -1) {\n                //card not present anywhere...return the same state\n                return _objectSpread({}, state);\n              } //card present in done...replace the old card in done and return the new done list\n\n\n              state.done[_idx] = _objectSpread({}, _card);\n              return _objectSpread({}, state, {\n                done: _toConsumableArray(state.done)\n              });\n            } //card presetn in todo...replace the old card in todo and return the new todo list\n\n\n            state.todo[_idx] = _objectSpread({}, _card);\n            return _objectSpread({}, state, {\n              todo: _toConsumableArray(state.todo)\n            });\n          } //card present in inProgress..replace the old card in inProgress and return the inProgress list.\n\n\n          state.inProgress[_idx] = _objectSpread({}, _card);\n          return _objectSpread({}, state, {\n            inProgress: _toConsumableArray(state.inProgress)\n          });\n        } //card present in all...replace the old card in all and return the all list.\n\n\n        state.all[_idx] = _objectSpread({}, _card);\n        return _objectSpread({}, state, {\n          all: _toConsumableArray(state.all)\n        });\n      }\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/sanya/Documents/intern/jira-todo/src/reducers.js"],"names":["_","ADD_NEW_CARD","REMOVE_CARD","EDIT_CARD","initialState","all","todo","inProgress","done","rootReducer","state","action","undefined","type","card","payload","idx","findIndex","o","id","filter","console","log"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport {ADD_NEW_CARD, REMOVE_CARD, EDIT_CARD} from './config/constants';\n\n\nconst initialState = {\n    all: [],\n    todo: [],\n    inProgress: [],\n    done: []\n}\n\nconst rootReducer = (state=initialState, action) => {\n     // if there is no action, return the initial state of the card //\n    if(state === null || state === undefined) return {...initialState}; \n\n    // checking for the type of action chosen by the user. The user can perform three types of actions i.e add a //\n    switch(action.type) {      \n        // add a new card, edit the previous card and delete the card//                \n        case ADD_NEW_CARD: {\n            const card = action.payload;\n            let idx = state.all.findIndex(o => o.id == card.id)\n            if (idx === -1){\n                idx = state.inProgress.findIndex(o => o.id === card.id)\n\n                if(idx === -1){\n                    idx = state.todo.findIndex(o => o.id === card.id)\n\n                    if(idx === -1){\n                        idx = state.done.findIndex(o => o.id === card.id)\n\n                        if(idx === -1){\n\n                            return {...state};\n                        }\n                        state.done[idx] = {...card}\n                        return {\n                            ...state,\n                            done: [...state.done, card]\n                        }\n                    }\n\n                    state.todo[idx] = {...card}\n                    return{\n                        ...state,\n                        todo: [...state.todo, card]\n                    }\n                }\n\n                state.inProgress[idx] = {...card}\n                return{\n                    ...state,\n                    inProgress: [...state.inProgress, card]\n                }\n            }\n            state.all[idx] = {...card}\n            return {\n                ...state,\n                all: [...state.all, card]\n            }\n        }\n\n        /* remove the card present in either of the four columns and restore the rest of the cards*/\n        case REMOVE_CARD: {                                                  \n            const id = action.payload                                        \n            const all = _.filter(state.all, o => o.id !== id)\n            const todo = _.filter(state.todo, o => o.id !== id)\n            const inProgress = _.filter(state.inProgress, o => o.id !== id)\n            const done = _.filter(state.done, o => o.id !== id)\n            console.log(id, all)    \n            return {\n                all, todo, inProgress, done\n            }\n        }\n\n    \n\n        case EDIT_CARD: {\n            const card = action.payload\n            let idx =  state.all.findIndex(o => o.id === card.id)\n            // if the card is not present in all check in next grid and so on//\n            if (idx === -1) {                       \n                idx = state.inProgress.findIndex(o => o.id === card.id)\n                //if the card is not present in inProgress\n                if(idx === -1) {\n                    idx = state.todo.findIndex(o => o.id === card.id)\n                    //if the card is not present in todo part\n                    if(idx === -1) {\n                        idx = state.done.findIndex(o => o.id === card.id)\n                        //if the card is also not present in done part\n                        if(idx === -1) {\n                            //card not present anywhere...return the same state\n                            return {...state}\n                        }\n                        //card present in done...replace the old card in done and return the new done list\n                        state.done[idx] = {...card};  \n                        \n                        return {                     \n                            ...state,\n                            done: [...state.done]  \n                        }\n                    }\n                    //card presetn in todo...replace the old card in todo and return the new todo list\n                    state.todo[idx] = {...card};\n                    return {\n                        ...state,\n                        todo: [...state.todo]\n                    }\n                }\n                //card present in inProgress..replace the old card in inProgress and return the inProgress list.\n                state.inProgress[idx] = {...card}\n                return {\n                    ...state,\n                    inProgress: [...state.inProgress]\n                }\n            }\n            //card present in all...replace the old card in all and return the all list.\n            state.all[idx] = {...card}\n            return {\n                ...state,\n                all: [...state.all]\n            }\n        }\n\n        default: return {...state};\n    }\n}\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}