{"ast":null,"code":"import _classCallCheck from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sanya/Documents/intern/jira-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sanya/Documents/intern/jira-todo/src/components/grid-column.js\";\nimport React, { Component } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { JCard } from './card';\nimport './styles/card.css'; //grid colum component\n\nexport var GridColumn =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GridColumn, _Component);\n\n  function GridColumn(props) {\n    _classCallCheck(this, GridColumn);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridColumn).call(this, props));\n  }\n\n  _createClass(GridColumn, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      //if it is the first column then only add button present\n      var addButton = null;\n\n      if (this.props.addable) {\n        addButton = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"blue\",\n          align: \"center\",\n          onClick: this.props.handleAddCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, \"Add Card\"));\n      } //if there number of cards come out to be null initialize it with empty list.\n\n\n      var cards = this.props.cards;\n      if (cards === null || cards === undefined) cards = []; //defining the segment\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        className: \"segment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.props.title), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), cards.map(function (card, ind) {\n        //adding properties to remove and edit card\n        return React.createElement(JCard, {\n          key: ind,\n          handleRemoveCard: _this.props.handleRemoveCard,\n          handleEditClick: _this.props.handleEditClick,\n          card: card,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }), addButton));\n    }\n  }]);\n\n  return GridColumn;\n}(Component);","map":{"version":3,"sources":["/home/sanya/Documents/intern/jira-todo/src/components/grid-column.js"],"names":["React","Component","Button","Segment","JCard","GridColumn","props","addButton","addable","handleAddCardClick","cards","undefined","title","map","card","ind","handleRemoveCard","handleEditClick"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,mBAA9B;AACA,SAAQC,KAAR,QAAoB,QAApB;AACA,OAAO,mBAAP,C,CAEA;;AACA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AACI,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,mFACTA,KADS;AAElB;;AAHL;AAAA;AAAA,6BAIc;AAAA;;AACN;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAG,KAAKD,KAAL,CAAWE,OAAd,EAAuB;AACnBD,QAAAA,SAAS,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,KAAK,EAAC,QAA3B;AAAoC,UAAA,OAAO,EAAE,KAAKD,KAAL,CAAWG,kBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAL,CADJ;AAGH,OAPK,CASN;;;AACA,UAAIC,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAvB;AACA,UAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2CD,KAAK,GAAG,EAAR,CAXrC,CAaN;;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKJ,KAAL,CAAWM,KAAhB,CADJ,EAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD/B,EAEKF,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP,EAAe;AACtB;AACA,eAAO,oBAAC,KAAD;AAAO,UAAA,GAAG,EAAEA,GAAZ;AAAiB,UAAA,gBAAgB,EAAE,KAAI,CAACT,KAAL,CAAWU,gBAA9C;AAAgE,UAAA,eAAe,EAAE,KAAI,CAACV,KAAL,CAAWW,eAA5F;AAA6G,UAAA,IAAI,EAAEH,IAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAHA,CAFL,EAMKP,SANL,CADJ,CADJ;AAYH;AA9BL;;AAAA;AAAA,EAAgCN,SAAhC","sourcesContent":["import React, {Component} from 'react'\nimport {Button, Segment} from 'semantic-ui-react';\nimport {JCard} from './card';\nimport './styles/card.css'\n\n//grid colum component\nexport class GridColumn extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render () {\n        //if it is the first column then only add button present\n        let addButton = null;\n        if(this.props.addable) {\n            addButton = (\n                <div><Button color=\"blue\" align=\"center\" onClick={this.props.handleAddCardClick}>Add Card</Button></div>\n            );\n        } \n\n        //if there number of cards come out to be null initialize it with empty list.\n        let cards = this.props.cards;\n        if (cards === null || cards === undefined) cards = [];\n        \n        //defining the segment\n        return (\n            <div>\n                <Segment className=\"segment\">\n                    <h1>{this.props.title}</h1><hr/>\n                    {cards.map((card, ind) => {\n                        //adding properties to remove and edit card\n                        return <JCard key={ind} handleRemoveCard={this.props.handleRemoveCard} handleEditClick={this.props.handleEditClick} card={card} />\n                    })}\n                    {addButton}\n                </Segment>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}